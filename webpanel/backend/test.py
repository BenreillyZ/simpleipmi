"""
This module is the main program for the Flask web application.
It is responsible for handling HTTP requests, rendering HTML pages, and providing a video streaming service.

Imported modules:
- flask: A lightweight web framework.
  - Flask: The main class for the application instance.
  - render_template: Used to render HTML templates.
  - Response: Used to create HTTP response objects, especially for streaming.
  - request: Used to access incoming request data (like URL parameters).
- camera_module: Our custom module for handling all camera-related operations.
  - get_available_cameras: Imported from camera_module, used to detect available devices.
  - generate_frames: Imported from camera_module, used to generate the video frame stream.
"""

# Import necessary libraries
from flask import Flask, render_template, Response, request
# Import camera-related functions from the camera_module module
from camera_module import get_available_cameras, generate_frames

# Initialize the Flask application
app = Flask(__name__)

@app.route('/')
def index():
    """Main page route, renders the HTML page with control options"""
    # Get the user's current selections from the request's URL parameters to maintain them after a page refresh
    selected_device_str = request.args.get('device')
    selected_res_str = request.args.get('resolution')

    # Try to convert the device ID to an integer for comparison in the template
    try:
        selected_device_int = int(selected_device_str)
    except (ValueError, TypeError):
        selected_device_int = None


    # Get all available cameras
    available_cameras = get_available_cameras()
    
    # Define a list of standard resolutions for the user to choose from
    resolutions = {
        "640x480": (640, 480),
        "800x600": (800, 600),
        "1280x720": (1280, 720), # 720p
        "1920x1080": (1920, 1080), # 1080p
    }
    
    # Render the template, passing the camera list, resolution list, and user's current selections to it
    return render_template('index.html', 
                           cameras=available_cameras, 
                           resolutions=resolutions.keys(),
                           selected_device=selected_device_int, # pass integer or None
                           selected_res=selected_res_str)

@app.route('/video_feed')
def video_feed():
    """Video feed route, returns a video stream for a specific device and resolution based on URL parameters"""
    # Get device ID and resolution from the URL query parameters
    device_id = request.args.get('device', '0') # default to device 0
    res_str = request.args.get('resolution', '640x480') # default to 640x480
    
    # Convert the resolution string to a tuple of integers
    try:
        width, height = map(int, res_str.split('x'))
        resolution = (width, height)
    except (ValueError, AttributeError):
        # If the format is incorrect or res_str is None, use the default value
        print(f"Invalid resolution parameter format '{res_str}', using default 640x480.")
        resolution = (640, 480)

    # Return a live video stream generated by generate_frames()
    return Response(generate_frames(device_id, resolution),
                    mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    # Start the Flask development server
    # threaded=True allows multiple clients to connect and view the stream simultaneously
    app.run(host='0.0.0.0', port=8080, debug=False, threaded=True)